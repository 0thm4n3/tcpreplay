autogen definitions options;

copyright = {
    date        = "2000 - 2004";
    owner       = "Aaron Turner";
    eaddr       = "aturner@pobox.com";
    type        = "bsd";
};

package         = "tcpreplay";
prog-name       = "tcpreplay";
prog-title      = "Replay network traffic stored in pcap files";
long-opts;
gnu-usage;
help-value      = "H";
save-opts-value = "";
load-opts-value = "";

config-header   = "config.h";

include         = "#include \"defines.h\"\n"
                "#include \"tcpreplay.h\"\n"
                "#include \"common.h\"\n"
                "extern char pcap_version[];\n"
                "extern tcpreplay_opt_t options;\n";

homerc          = "$$/";

explain = <<- EOExplain
    tcpreplay is a tool for replaying network traffic from files saved with
    tcpdump or other tools which write pcap(3) files.
EOExplain;

detail = <<- EODetail
     The basic operation of tcpreplay is to resend  all  packets  from  the
     input file(s) at the speed at which they were recorded, or a specified 
     data rate, up to as fast as the hardware is capable.

     Optionally, the traffic can be split between two interfaces, written to
     files, filtered and edited in various ways, providing the means to test
     firewalls, NIDS and other network devices.
EODetail;

/* Verbose decoding via tcpdump */

flag = {
    ifdef       = HAVE_TCPDUMP;
    name        = verbose;
    value       = v;
    max         = 1;
    immediate;
    descrip     = "Print decoded packets via tcpdump to STDOUT";
    settable;
};

flag = {
    ifdef       = HAVE_TCPDUMP;
    name        = decode;
    flags-must  = verbose;
    value       = A;
    arg-type    = string;
    max         = 1;
    descrip     = "Arguments passed to tcpdump decoder";
};

flag = {
    name        = dbug;
    value       = d;
    arg-type    = number;
    max         = 1;
    immediate;
    arg-range   = "0->5";
    arg-default = 0;
    descrip     = "Enable debugging output";
};

/*
 * Output modifiers: -c
 */

flag = {
    name        = cachefile;
    value       = c;
    arg-type    = string;
    max         = 1;
    descrip     = "Split traffic via tcpprep cache file";
};

/*
 * Outputs: -i, -I
 */

flag = {
    name        = intf1;
    value       = i;
    arg-type    = string;
    max         = 1;
    must-set;
    descrip     = "Primary output interface";
};

flag = {
    name        = intf2;
    value       = I;
    arg-type    = string;
    max         = 1;
    flags-must  = cachefile;
    descrip     = "Secondary output interface";
};

/*
 * Limits and loops: -l
 */

flag = {
    name        = loop;
    value       = l;
    arg-type    = number;
    arg-range   = "0->";
    max         = 1;
    descrip     = "Loop through the capture file X times";
    arg-default = 1;
};

/*
 * Replay speed modifiers: -m, -p, -r, -R, -o
 */

/* note that this is really a float, but autoopts does not support float */
flag = {
    name        = multiplier;
    flags-cant  = pktrate;
    flags-cant  = mbpsrate;
    flags-cant  = oneatatime;
    flags-cant  = topspeed;
    value       = m;
    arg-type    = string;
    max         = 1;
    descrip     = "Modify replay speed to a given multiple";
};

flag = {
    name        = pktrate;
    flags-cant  = multiplier;
    flags-cant  = mbpsrate;
    flags-cant  = oneatatime;
    flags-cant  = topspeed;
    value       = p;
    arg-type    = number;
    max         = 1;
    descrip     = "Replay packets at a given packets/sec";
};

flag = {
    name        = mbpsrate;
    flags-cant  = multiplier;
    flags-cant  = pktrate;
    flags-cant  = oneatatime;
    flags-cant  = topspeed;
    value       = r;
    arg-type    = string;
    max         = 1;
    descrip     = "Replay packets at a given Mbps";
};

flag = {
    name        = topspeed;
    flags-cant  = mbpsrate;
    flags-cant  = multiplier;
    flags-cant  = pktrate;
    flags-cant  = oneatatime;
    value       = R;
    descrip     = "Replay packets as fast as possible";
};

flag = {
    name        = oneatatime;
    flags-cant  = mbpsrate;
    flags-cant  = pktrate;
    flags-cant  = multiplier;
    flags-cant  = topspeed;
    value       = o;
    descrip     = "Replay one packet at a time for each user input";
};

flag = {
    name        = pcap;
    value       = p;
    descrip     = "Input pcap file to replay";
    arg-type    = string;
    max         = MAX_FILES;
    min         = 1;
    flag-code   = <<- EOPcap

    static int count = 0;
    
    options.files[count++] = safe_strdup(OPT_ARG(PCAP));
    
EOPcap;
};

flag = {
    name        = pid;
    value       = P;
    descrip     = "Print the PID of tcpreplay at startup";
    flag-code   = <<- EOPid
    
    fprintf(stderr, "PID: %hu\n", getpid());
    
EOPid;
};

flag = {
    name        = version;
    value       = V;
    descrip     = "Print version information";
    flag-code   = <<- EOVersion
    
    fprintf(stderr, "tcpreplay version: %s", VERSION);
#ifdef DEBUG
    fprintf(stderr, " (debug)");
#endif
    fprintf(stderr, "\n");
    fprintf(stderr, "Cache file supported: %s\n", CACHEVERSION);
    fprintf(stderr, "Compiled against libnet: %s\n", LIBNET_VERSION);
    fprintf(stderr, "Compiled against libpcap: %s\n", pcap_version);
#ifdef ENABLE_64BITS
    fprintf(stderr, "64 bit packet counters: enabled\n");
#else
    fprintf(stderr, "64 bit packet counters: disabled\n");
#endif
    exit(0);
    
EOVersion;
};

flag = {
    name        = less-help;
    value       = "h";
    immediate;
    descrip     = "Display less usage information and exit";
    flag-code   = <<- EOHelp
  
    USAGE(EXIT_FAILURE);

EOHelp;
};
